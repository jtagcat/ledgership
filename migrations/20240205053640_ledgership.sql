-- TODO: GET /grants {
CREATE TYPE grantT AS (
    service	TEXT,
    data	TEXT,
);

-- TODO: POST /package {admin}
-- TODO: GET /package
--        -> {admin} returns all + subscriber count
-- TODO: GET /package/:id {user:own}
--        -> {admin} returns subscribers
-- TODO: PATCH /package/:id?successor=id {admin} - moves subscriptions, creates a new subscription on price change; TODO: test edge-cases
-- TODO: PUT /package/:id?publish_for=text, {admin}: publish_for
--
-- TODO: might want to break this up
CREATE TABLE IF NOT EXISTS packages (
    id              INT                 GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author          TEXT                NOT NULL,
    created_at      CURRENT_TIMESTAMP   NOT NULL,
    ancestor        INT                 REFERENCES packages, -- mutable

    -- v display to non-admins
    name            TEXT    NOT NULL,
    description     TEXT,
    price           NUMERIC NOT NULL,
    currency        TEXT    NOT NULL,
    -- ^

    grants	    grantT[],

    publish_for     TEXT[], -- mutable; /package for non-admin
    -- ^ packages present in user transactions are always queriable by user
);
--
CREATE TABLE IF NOT EXISTS packages_order (
    order   ELEMENT REFERENCES packages, --TODO: might fail
);

-- TODO: POST /sub
-- TODO: DELETE /sub/:id
--           -> when notBefore is before now
--           -> or {admin}
-- TODO: PATCH /sub/:id?notAfter=date
-- TODO: GET /sub/:user
-- TODO: PUT /sub/:id/mail/name
-- TODO: PUT /sub/:id/mail/email
CREATE TABLE IF NOT EXISTS subscriptions (
    id              INT         GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user            TEXT        NOT NULL, -- {admin:rw}

    package         INT         NOT NULL REFERENCES packages, -- mutable by PATCH /package/:id?successor=id
    package_original         INT         NOT NULL REFERENCES packages,
    notBefore       TIMESTAMP   NOT NULL,
    notAfter        TIMESTAMP, -- mutable by PATCH /sub/:id?notAfter=date and PATCH /package/:id?successor=id

    custom_price    NUMERIC, -- {admin:rw}

    grantee         TEXT, -- or:
    managed_by      INT REFERENCES subscriptions,

    invoice_name    TEXT,
    invoice_email    TEXT,
);
--
CREATE INDEX subscriptions_user_index ON subscriptions (user);

CREATE TYPE IF NOT EXISTS transaction_kind AS ENUM (
    'deposit',
    'expense',
    'expense_subscription',
);

-- TODO: GET /ledger
--        -> {admin} /:user
-- TODO: GET /ledger/export
--        -> {admin} all users
CREATE TABLE IF NOT EXISTS ledger (
    user    TEXT                NOT NULL,
    ts      TIMESTAMP           NOT NULL,
    source  TEXT                NOT NULL,
    kind    transaction_kind    NOT NULL,

    -- ledger...
);
--
CREATE INDEX subscriptions_user_index ON subscriptions (user,ts);
